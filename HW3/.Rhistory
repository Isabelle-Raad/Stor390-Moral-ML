svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
points(x[svmfit$index,], pch = 5, cex = 2)
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 10000, scale = FALSE)
print(svmfit)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
points(x[svmfit$index,], pch = 5, cex = 2)
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 10000, scale = FALSE)
print(svmfit)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
points(x[svmfit$index,], pch = 5, cex = 2)
# Put an x over test data.
points(test, pch = 4, cex = 2)
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
points(x[svmfit$index,], pch = 5, cex = 2)
# Put an x over test data.
points(test, pch = 4, cex = 2)
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
points(x[svmfit$index,], pch = 5, cex = 2)
# Put an x over test data.
points(test, pch = 19, col="green", cex = 2)
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
points(x[svmfit$index,], pch = 5, cex = 2)
# Put an x over test data.
points(test, pch = 19, col="green")
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 10000, scale = FALSE)
print(svmfit)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
points(x[svmfit$index,], pch = 5, cex = 2)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
points(x[svmfit$index,], pch = 5, cex = 2)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 10000, scale = FALSE)
print(svmfit)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
table(true=dat[-train,"y"], pred=predict(svmfit, newdata=dat[-train,]))
table(true=dat[-train_index,"y"], pred=predict(svmfit, newdata=dat[-train_index,]))
library(e1071)
set.seed(1)
x=matrix(rnorm(200*2),ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x, col=y)
# Create training-testing partition.
train_index = sample(1:nrow(dat), 100, replace=FALSE)
train <- dat[train_index,]
test <- dat[-train_index,]
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
# Create training-testing partition.
train_index = sample(1:nrow(dat), 100, replace=FALSE)
train <- dat[train_index,]
test <- dat[-train_index,]
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
# Fit svm with radial kernel to train.
svmfit2 <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 10000, scale = FALSE)
print(svmfit2)
# Put our prediction on the grid.
ygrid2 = predict(svmfit2, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid2)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
table(true=dat[-train_index,"y"], pred=predict(svmfit, newdata=dat[-train_index,]))
table(true=dat[-train_index,"y"], pred=predict(svmfit2, newdata=dat[-train_index,]))
table(true=dat[-train_index,"y"], pred=predict(svmfit2, newdata=dat[-train_index,]))
library(e1071)
set.seed(1)
x=matrix(rnorm(200*2),ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x, col=y)
# Create training-testing partition.
train_index = sample(1:nrow(dat), 100, replace=FALSE)
train <- dat[train_index,]
test <- dat[-train_index,]
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
# Fit svm with radial kernel to train.
svmfit2 <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 10000, scale = FALSE)
print(svmfit2)
# Put our prediction on the grid.
ygrid2 = predict(svmfit2, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid2)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
table(true=dat[-train_index,"y"], pred=predict(svmfit2, newdata=dat[-train_index,]))
set.seed(1)
library(kmed)
data(heart)
library(tree)
set.seed(101)
library(e1071)
set.seed(1)
x=matrix(rnorm(200*2),ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x, col=y)
# Create training-testing partition.
set.seed(1)
train_index = sample(1:nrow(dat), 100, replace=FALSE)
train <- dat[train_index,]
test <- dat[-train_index,]
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
# Fit svm with radial kernel to train.
svmfit2 <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 10000, scale = FALSE)
print(svmfit2)
# Put our prediction on the grid.
ygrid2 = predict(svmfit2, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid2)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
table(true=dat[-train_index,"y"], pred=predict(svmfit2, newdata=dat[-train_index,]))
set.seed(1)
library(kmed)
data(heart)
library(tree)
set.seed(101)
library(e1071)
set.seed(1)
x=matrix(rnorm(200*2),ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x, col=y)
# Create training-testing partition.
set.seed(1)
train_index = sample(1:nrow(dat), 100, replace=FALSE)
train <- dat[train_index,]
test <- dat[-train_index,]
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
# Fit svm with radial kernel to train.
svmfit2 <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 10000, scale = FALSE)
print(svmfit2)
# Put our prediction on the grid.
ygrid2 = predict(svmfit2, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid2)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
table(true=dat[-train_index,"y"], pred=predict(svmfit2, newdata=dat[-train_index,]))
set.seed(1)
library(kmed)
data(heart)
library(tree)
set.seed(101)
3/21
17/(17+63)
3/21
17/(17+62)
library(tidyverse)
len(select(dat, y == 2))
library(tidyverse)
len(select(dat, y == 2))
library(tidyverse)
nrow(select(dat, y == 2)) / nrow(dat)
library(tidyverse)
nrow(dat %>% select(y == 2)) / nrow(dat)
library(tidyverse)
nrow(filter(dat, y == 2)) / nrow(dat)
library(tidyverse)
nrow(filter(train, y == 2)) / nrow(train)
library(e1071)
set.seed(1)
x=matrix(rnorm(200*2),ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x, col=y)
# Create training-testing partition.
set.seed(1)
train_index = sample(1:nrow(dat), 100, replace=FALSE)
train <- dat[train_index,]
test <- dat[-train_index,]
# Fit svm with radial kernel to train.
svmfit <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 1, scale = FALSE)
print(svmfit)
# Make a grid.
make.grid = function(x, n = 75) {
grange = apply(x, 2, range)
x1 = seq(from = grange[1,1], to = grange[2,1], length = n)
x2 = seq(from = grange[1,2], to = grange[2,2], length = n)
expand.grid(x.1 = x1, x.2 = x2)
}
xgrid = make.grid(x)
# Put our prediction on the grid.
ygrid = predict(svmfit, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
# Fit svm with radial kernel to train.
svmfit2 <- svm(y~., data = train, kernel = "radial", gamma = 1, cost = 10000, scale = FALSE)
print(svmfit2)
# Put our prediction on the grid.
ygrid2 = predict(svmfit2, xgrid)
plot(xgrid, col = c("gray","red")[as.numeric(ygrid2)], pch = 20, cex = .2)
points(x, col = y, pch = 19)
# Put an x over test data.
points(test, pch = 4, cex = 1.5)
table(true=dat[-train_index,"y"], pred=predict(svmfit2, newdata=dat[-train_index,]))
library(tidyverse)
nrow(filter(train, y == 2)) / nrow(train)
set.seed(1)
library(kmed)
data(heart)
library(tree)
set.seed(101)
library(tidyverse)
nrow(filter(train, y == 2)) / nrow(train)
$tune()
?tune()
set.seed(1)
tune.out <- tune(svm, y ~ x.1 + x.2, data = train, kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1,2,3,4)),
scale = FALSE)
table(true=dat[-train,"y"], pred=predict(tune.out$best.model, newdata=dat[-train,]))
set.seed(1)
tune.out <- tune(svm, y ~ x.1 + x.2, data = train, kernel = "radial",
ranges = (cost = c(0.1, 1, 10, 100, 1000),
set.seed(1)
tune.out <- tune(svm, y ~ x.1 + x.2, data = train, kernel = "radial",
ranges = list(cost = c(0.1, 1, 10, 100, 1000),
gamma = c(0.5, 1,2,3,4)),
scale = FALSE)
table(true=dat[-train_index,"y"], pred=predict(tune.out$best.model, newdata=dat[-train_index,]))
library(kmed)
data(heart)
library(tree)
heartclass = ifelse(heart$class == 1, 1, 0)
heart$class <- as.factor(heartclass)
str(heart$class)
library(kmed)
data(heart)
library(tree)
library(kmed)
data(heart)
library(tree)
head(heart)
summary(heart$class)
unique(heart$class)
heartclass = ifelse(heart$class > 0, 1, 0)
heart$class <- as.factor(heartclass)
str(heart$class)
library(kmed)
data(heart)
library(tree)
heartclass = ifelse(heart$class > 0, 1, 0)
heart$class <- as.factor(heartclass)
str(heart$class)
set.seed(101)
# Partition heart into training and testing data.
train_indexh = sample(1:nrow(heart), 240, replace=FALSE)
trainh <- heart[train_indexh,]
testh <- heart[-train_indexh,]
treeh <- tree(class~., data = heart, subset = trainh)
heartclass = ifelse(heart$class > 0, 1, 0)
heart$class <- as.factor(heartclass)
levels(heart$class) <- c("no disease", "disease")
str(heart$class)
library(kmed)
data(heart)
library(tree)
heartclass = ifelse(heart$class > 0, 1, 0)
heart$class <- as.factor(heartclass)
levels(heart$class) <- c("no disease", "disease")
str(heart$class)
set.seed(101)
# Partition heart into training and testing data.
train_indexh = sample(1:nrow(heart), 240, replace=FALSE)
trainh <- heart[train_indexh,]
testh <- heart[-train_indexh,]
treeh <- tree(class~., data = heart, subset = trainh)
set.seed(101)
# Partition heart into training and testing data.
train_indexh = sample(1:nrow(heart), 240, replace=FALSE)
trainh <- heart[train_indexh,]
testh <- heart[-train_indexh,]
treeh <- tree(class~.-class, data = heart, subset = trainh)
set.seed(101)
# Partition heart into training and testing data.
train_indexh = sample(1:nrow(heart), 240, replace=FALSE)
trainh <- heart[train_indexh,]
testh <- heart[-train_indexh,]
treeh <- tree(class~., data = trainh)
plot(treeh)
text(treeh, pretty=0)
table(true=trainh[,"class"], pred=predict(treeh, newdata = testh, type = "class"))
predicted <- predict(treeh, newdata = testh, type = "class")
table(true=trainh[,"class"], pred=predicted$class)
predicted <- predict(treeh, newdata = testh, type = "class")
summary(predicted)
#table(true=trainh[,"class"], pred=predicted$class)
predicted <- predict(treeh, newdata = testh, type = "class")
predicted
#table(true=trainh[,"class"], pred=predicted$class)
predicted <- predict(treeh, newdata = testh, type = "class")
predicted
table(true=trainh[,"class"], pred=predicted)
predicted <- predict(treeh, newdata = testh, type = "class")
table(true=testh[,"class"], pred=predicted)
table(true=testh[,"class"], pred=predict(treeh, newdata = testh, type = "class")
table(true=testh[,"class"], pred=predict(treeh, newdata = testh, type = "class"))
1 - (sum(diag(confh))/nrow(testh))
confh <- table(true=testh[,"class"], pred=predict(treeh, newdata = testh, type = "class"))
confh
1 - (sum(diag(confh))/nrow(testh))
cv.treeh <- cv.tree(treeh, FUN= prune.misclass)
plot(cv.treeh)
text(cv.treeh, pretty=0)
cv.treeh <- cv.tree(treeh, FUN= prune.misclass)
plot(cv.treeh)
cv.treeh <- cv.tree(treeh, FUN= prune.misclass)
plot(cv.treeh)
cv.treeh
cv.treeh <- cv.tree(treeh, FUN= prune.misclass)
plot(cv.treeh)
cv.treeh$size[which.min(cv.tree$dev)]
filter(cv.tree, size == 4)
pruned <- prune.misclass(treeh, best=4)
plot(pruned)
text(pruned, pretty=0)
confprun <- table(true=testh[,"class"], pred=predict(pruned, newdata = testh, type = "class"))
confprun
1 - (sum(diag(confprun))/nrow(testh))
