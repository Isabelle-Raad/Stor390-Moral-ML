mutate(pclass = factor(pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),
survived = factor(survived, levels = c(0, 1), labels = c('No', 'Yes'))) %>%
na.omit()
#previously were characters
clean_titanic$age <- as.numeric(clean_titanic$age)
clean_titanic$fare <- as.numeric(clean_titanic$fare)
glimpse(clean_titanic)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(clean_titanic, 0.8, train = TRUE)
data_test <- create_train_test(clean_titanic, 0.8, train = FALSE)
data_train %>% group_by(survived) %>% summarize(`proportion of train` = n()/nrow(data_train))
data_test %>% group_by(survived) %>% summarize(`proportion of test` = n()/nrow(data_test))
model <- glm(survived~pclass+sex+age+sibsp+parch, family=binomial(link="logit"),
data=data_train)
# Subsetting the testing data into male and female groups.
data_testm <- data_test %>% filter(sex == 'male')
data_testf <- data_test %>% filter(sex == 'female')
# Computing the predicted probabilities of surviving the Titanic for members of each group.
predictedm <- predict(model, newdata=data_testm, type="response")
predictedf <- predict(model, newdata=data_testf, type="response")
# Let's see how the distributions of each group line up.
summary(predictedm)
summary(predictedf)
library(caret)
# Pairing the predicted probabilities with a decision boundary to yield a classifier.
fitted.resultsm <- ifelse(predictedm>0.5, "Yes", "No")
fitted.resultsf <- ifelse(predictedf>0.5, "Yes", "No")
# Creating a confusion matrix for male and female test sets.
confusionMatrix(as.factor(fitted.resultsm), data_testm$survived, positive="Yes")
confusionMatrix(as.factor(fitted.resultsf), data_testf$survived, positive="Yes")
library(caret)
# Pairing the predicted probabilities with a decision boundary to yield a classifier.
fitted.resultsm <- ifelse(predictedm>0.5, "Yes", "No")
fitted.resultsf <- ifelse(predictedf>0.5, "Yes", "No")
# Creating a confusion matrix for male and female test sets.
confusionMatrix(as.factor(fitted.resultsm), data_testm$survived, positive="Yes")
confusionMatrix(as.factor(fitted.resultsf), data_testf$survived, positive="Yes")
summary(model)
# SEE FAIRNESS READING
# Overall accuracy rate ratio between females and males
(sum(fitted.resultsm == "Yes")/length(fitted.resultsm)) /
(sum(fitted.resultsf == "Yes")/length(fitted.resultsf))
# Disparate impact between females and males
# Statistical parity between females and males
# Predictive equality between females and males
# Equal opportunity between females and males
# Equalized odds
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_trainm %>% group_by(survived) %>% summarize(`number`=n()) %>% sort(survived, decreasing=TRUE)
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>% group_by(survived) %>% summarize(`number`=n()) %>% sort(survived, decreasing=TRUE)
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>% group_by(survived) %>% summarize(`number`=n()) %>% arrange(survived, decreasing=TRUE)
num.myes
# Overall accuracy rate ratio between females and males
# Disparate impact between females and males
probmyes / probfyes
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>% group_by(survived) %>% summarize(`number`=n()) %>% arrange(survived, decreasing=TRUE)
num.myes
# Overall accuracy rate ratio between females and males
# Disparate impact between females and males
#probmyes / probfyes
# Statistical parity between females and males
#abs(probfyes - probmyes)
# Predictive equality between females and males
# Equal opportunity between females and males
abs(4/length(filter(datatest_m, survived='yes'))
# Equalized odds
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>% group_by(survived) %>% summarize(`number`=n()) %>% arrange(survived, decreasing=FALSE)
num.myes
# Overall accuracy rate ratio between females and males
# Disparate impact between females and males
#probmyes / probfyes
# Statistical parity between females and males
#abs(probfyes - probmyes)
# Predictive equality between females and males
# Equal opportunity between females and males
abs(4/length(filter(datatest_m, survived='yes'))
# Equalized odds
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>% group_by(survived) %>% summarize(`number`=n()) %>% filter(survived =='yes')
num.myes
# Overall accuracy rate ratio between females and males
# Disparate impact between females and males
#probmyes / probfyes
# Statistical parity between females and males
#abs(probfyes - probmyes)
# Predictive equality between females and males
# Equal opportunity between females and males
abs(4/length(filter(datatest_m, survived='yes'))
# Equalized odds
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>% group_by(survived) %>% summarize(`number`=n()) %>% filter(survived =='Yes')
num.myes
# Overall accuracy rate ratio between females and males
# Disparate impact between females and males
#probmyes / probfyes
# Statistical parity between females and males
#abs(probfyes - probmyes)
# Predictive equality between females and males
# Equal opportunity between females and males
abs(4/length(filter(datatest_m, survived='yes'))
# Equalized odds
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>%
group_by(survived) %>%
summarize(`number`=n()) %>%
filter(survived =='Yes')[1,2]
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>%
group_by(survived) %>%
summarize(`number`=n()) %>%
filter(survived =='Yes')
num.myes[1,2]
# Overall accuracy rate ratio between females and males
# Disparate impact between females and males
#probmyes / probfyes
# Statistical parity between females and males
#abs(probfyes - probmyes)
# Predictive equality between females and males
# Equal opportunity between females and males
abs(4/length(filter(datatest_m, survived='yes'))
# Equalized odds
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>%
group_by(survived) %>%
summarize(`number`=n()) %>%
filter(survived =='Yes')
num.myes[[1,2]]
# Overall accuracy rate ratio between females and males
# Disparate impact between females and males
#probmyes / probfyes
# Statistical parity between females and males
#abs(probfyes - probmyes)
# Predictive equality between females and males
# Equal opportunity between females and males
abs(4/length(filter(datatest_m, survived='yes'))
# Equalized odds
fittedyesm.prop <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prop <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>%
group_by(survived) %>%
summarize(`number`=n()) %>%
filter(survived =='Yes')
num.myes[[1,2]]
# Overall accuracy rate ratio between females and males
# Disparate impact between females and males
#probmyes / probfyes
# Statistical parity between females and males
#abs(probfyes - probmyes)
# Predictive equality between females and males
# Equal opportunity between females and males
#abs(4/length(filter(datatest_m, survived='yes'))
# Equalized odds
fittedyesm.prob <- sum(fitted.resultsm == "Yes")/length(fitted.resultsm)
fittedyesf.prob <- sum(fitted.resultsf == "Yes")/length(fitted.resultsf)
num.myes <- data_testm %>%
group_by(survived) %>%
summarize(`number`=n()) %>%
filter(survived =='Yes')
num.fyes <- data_testf %>%
group_by(survived) %>%
summarize(`number`=n()) %>%
filter(survived =='Yes')
# Overall accuracy rate ratio between females and males
# Disparate impact between females and males
fittedyesm.prob / fittedyesf.prob
# Statistical parity between females and males
abs(fittedyesf.prob - fittedyesm.prob)
# Predictive equality between females and males
# Equal opportunity between females and males
abs(4/(num.myes[[1,2]]) - 59/(num.fyes[[1,2]]))
# Equalized odds
library(caret)
# Pairing the predicted probabilities with a decision boundary to yield a classifier.
fitted.resultsm <- ifelse(predictedm>0.5, "Yes", "No")
fitted.resultsf <- ifelse(predictedf>0.5, "Yes", "No")
# Creating a confusion matrix for male and female test sets.
confusionm <- confusionMatrix(as.factor(fitted.resultsm), data_testm$survived, positive="Yes")
confusionf <- confusionMatrix(as.factor(fitted.resultsf), data_testf$survived, positive="Yes")
confusionm
confusionf
mtrueyes <- confusionm$table['Yes', 'Yes']
mfalseyes <- confusionm$table['Yes', 'No']
mfalseno <- confusionm$table['No', 'Yes']
mtrueno <- confusionm$table['No', 'No']
ftrueyes <- confusionf$table['Yes', 'Yes']
ffalseyes <- confusionf$table['Yes', 'No']
ffalseno <- confusionf$table['No', 'Yes']
ftrueno <- confusionf$table['No', 'No']
# Overall accuracy rate ratio between females and males
confusionf$overall['Accuracy'] /  confusionm$overall['Accuracy']
# Disparate impact between females and males
(((mtrueyes+mfalseyes)/length(fitted.resultsm)) /
((ftrueyes+ffalseyes)/length(fitted.resultsf)))
# Statistical parity between females and males
abs(((ftrueyes+ffalseyes)/length(fitted.resultsf)) -
((mtrueyes+mfalseyes)/length(fitted.resultsm)))
# Predictive equality between females and males
abs((ffalseyes/(ffalseyes + ftrueno)) - (mfalseyes/(mfalseyes + mtrueno)))
# Equal opportunity between females and males
abs((mtrueyes/(mtrueyes+mfalseno)) - (ftrueyes/(ftrueyes+ffalseno)))
# Equalized odds
mtrueyes <- confusionm$table['Yes', 'Yes']
mfalseyes <- confusionm$table['Yes', 'No']
mfalseno <- confusionm$table['No', 'Yes']
mtrueno <- confusionm$table['No', 'No']
ftrueyes <- confusionf$table['Yes', 'Yes']
ffalseyes <- confusionf$table['Yes', 'No']
ffalseno <- confusionf$table['No', 'Yes']
ftrueno <- confusionf$table['No', 'No']
# Overall accuracy rate ratio between females and males
confusionf$overall['Accuracy'] /  confusionm$overall['Accuracy']
((93+4)/(93+28+4+4))/((4+59)/(4+2+15+59))
# Disparate impact between females and males
(((mtrueyes+mfalseyes)/length(fitted.resultsm)) /
((ftrueyes+ffalseyes)/length(fitted.resultsf)))
((28+4)/(93+28+4+4))/((2+59)/(4+2+15+59))
# Statistical parity between females and males
abs(((ftrueyes+ffalseyes)/length(fitted.resultsf)) -
((mtrueyes+mfalseyes)/length(fitted.resultsm)))
abs(((28+4)/(93+28+4+4)) - ((2+59)/(4+2+15+59)))
# Predictive equality between females and males
abs((ffalseyes/(ffalseyes + ftrueno)) - (mfalseyes/(mfalseyes + mtrueno)))
abs((28/(28+93)) - (2/(2+4)))
# Equal opportunity between females and males
abs((mtrueyes/(mtrueyes+mfalseno)) - (ftrueyes/(ftrueyes+ffalseno)))
abs((4/(4+4)) - (59/(15+59)))
mtrueyes <- confusionm$table['Yes', 'Yes']
mfalseyes <- confusionm$table['Yes', 'No']
mfalseno <- confusionm$table['No', 'Yes']
mtrueno <- confusionm$table['No', 'No']
ftrueyes <- confusionf$table['Yes', 'Yes']
ffalseyes <- confusionf$table['Yes', 'No']
ffalseno <- confusionf$table['No', 'Yes']
ftrueno <- confusionf$table['No', 'No']
# Overall accuracy rate ratio between females and males
confusionm$overall['Accuracy'] /  confusionf$overall['Accuracy']
((93+4)/(93+28+4+4))/((4+59)/(4+2+15+59))
# Disparate impact between females and males
(((mtrueyes+mfalseyes)/length(fitted.resultsm)) /
((ftrueyes+ffalseyes)/length(fitted.resultsf)))
((28+4)/(93+28+4+4))/((2+59)/(4+2+15+59))
# Statistical parity between females and males
abs(((ftrueyes+ffalseyes)/length(fitted.resultsf)) -
((mtrueyes+mfalseyes)/length(fitted.resultsm)))
abs(((28+4)/(93+28+4+4)) - ((2+59)/(4+2+15+59)))
# Predictive equality between females and males
abs((ffalseyes/(ffalseyes + ftrueno)) - (mfalseyes/(mfalseyes + mtrueno)))
abs((28/(28+93)) - (2/(2+4)))
# Equal opportunity between females and males
abs((mtrueyes/(mtrueyes+mfalseno)) - (ftrueyes/(ftrueyes+ffalseno)))
abs((4/(4+4)) - (59/(15+59)))
mtrueyes <- confusionm$table['Yes', 'Yes']
mfalseyes <- confusionm$table['Yes', 'No']
mfalseno <- confusionm$table['No', 'Yes']
mtrueno <- confusionm$table['No', 'No']
ftrueyes <- confusionf$table['Yes', 'Yes']
ffalseyes <- confusionf$table['Yes', 'No']
ffalseno <- confusionf$table['No', 'Yes']
ftrueno <- confusionf$table['No', 'No']
numberm <- mtrueyes+mfalseyes+mfalseno+mtrueno
numberf <- ftrueyes+ffalseyes+ffalseno+ftrueno
# Overall accuracy rate ratio between females and males
confusionm$overall['Accuracy'] /  confusionf$overall['Accuracy']
((93+4)/(93+28+4+4))/((4+59)/(4+2+15+59))
# Disparate impact between females and males
(((mtrueyes+mfalseyes)/numberm) /
((ftrueyes+ffalseyes)/numberf))
((28+4)/(93+28+4+4))/((2+59)/(4+2+15+59))
# Statistical parity between females and males
abs(((ftrueyes+ffalseyes)/numberf) -
((mtrueyes+mfalseyes)/numberm))
abs(((28+4)/(93+28+4+4)) - ((2+59)/(4+2+15+59)))
# Predictive equality between females and males
abs((ffalseyes/(ffalseyes + ftrueno)) - (mfalseyes/(mfalseyes + mtrueno)))
abs((28/(28+93)) - (2/(2+4)))
# Equal opportunity between females and males
abs((mtrueyes/(mtrueyes+mfalseno)) - (ftrueyes/(ftrueyes+ffalseno)))
abs((4/(4+4)) - (59/(15+59)))
32.5/1.35
# Standard deviation of train
32.36*sqrt(length(AmesTrain))
library(tidyverse)
library(Stat2Data)
library(car)
# Pull in training cases.
AmesTrain <- read_csv("AmesTrain11.csv")
# Basic model from questions 1-3.
modhw3 <- lm(formula = Price ~ LotFrontage + LotArea + Condition + YearBuilt
+ YearRemodel + BasementFinSF + BasementUnFinSF + FirstSF
+ SecondSF + Bedroom + GarageSF + ScreenPorchSF,
data = AmesTrain)
summary(modhw3)
# Pull in the holdout cases.
AmesTest <- read_csv("AmesTest11.csv")
# Make predictions based on the basic model.
testpredictions <- predict.lm(modhw3, AmesTest)
testpredictions
testresids <- AmesTest$Price - testpredictions
testresids
mean(testresids)
sd(testresids)
# Standard deviation of train
32.36*sqrt(length(AmesTrain))
mod3$Residuals
modhw3$Residuals
plot(modhw3)
# Standard deviation of train
sd(AmesTrain$Price - predict.lm(modhw3, AmesTrain))
predictedresids <- data.frame(predicted = testpredictions, residuals = testresids)
plot(predictedresids)
abline(0, 0)
predictedresids <- data.frame(predicted = testpredictions, residuals = testresids)
plot(predictedresids)
abline(0, 0)
histogram(predictedresids)
predictedresids <- data.frame(predicted = testpredictions, residuals = testresids)
plot(predictedresids)
abline(0, 0)
hist(testresids)
predictedresids <- data.frame(predicted = testpredictions, residuals = testresids)
plot(predictedresids)
abline(0, 0)
hist(testresids, breaks=10)
# To find which homes have the residuals of largest magnitude.
sort(abs(testresids), decreasing = T)[1:20]
summary(AmesTest)
AmesTest[102,]
summary(AmesTest)
AmesTest[102,]
testresids[102]
mtrueyes <- confusionm$table['Yes', 'Yes']
mfalseyes <- confusionm$table['Yes', 'No']
mfalseno <- confusionm$table['No', 'Yes']
mtrueno <- confusionm$table['No', 'No']
ftrueyes <- confusionf$table['Yes', 'Yes']
ffalseyes <- confusionf$table['Yes', 'No']
ffalseno <- confusionf$table['No', 'Yes']
ftrueno <- confusionf$table['No', 'No']
numberm <- mtrueyes+mfalseyes+mfalseno+mtrueno
numberf <- ftrueyes+ffalseyes+ffalseno+ftrueno
# Overall accuracy rate ratio between females and males
confusionm$overall['Accuracy'] /  confusionf$overall['Accuracy']
# Disparate impact between females and males
(((mtrueyes+mfalseyes)/numberm) /
((ftrueyes+ffalseyes)/numberf))
((28+4)/(93+28+4+4))/((2+59)/(4+2+15+59))
mean(fitted.resultsm=="Yes")/mean(fitted.resultsf=="Yes")
# Statistical parity between females and males
abs(((ftrueyes+ffalseyes)/numberf) -
((mtrueyes+mfalseyes)/numberm))
abs(((28+4)/(93+28+4+4)) - ((2+59)/(4+2+15+59)))
# Predictive equality between females and males
abs((ffalseyes/(ffalseyes + ftrueno)) - (mfalseyes/(mfalseyes + mtrueno)))
abs((28/(28+93)) - (2/(2+4)))
# Equal opportunity between females and males
abs((mtrueyes/(mtrueyes+mfalseno)) - (ftrueyes/(ftrueyes+ffalseno)))
abs((4/(4+4)) - (59/(15+59)))
#this is all of the preprocessing done for the decision trees lecture.
path <- 'https://raw.githubusercontent.com/guru99-edu/R-Programming/master/titanic_data.csv'
titanic <-read.csv(path)
head(titanic)
library(dplyr)
#replace ? with NA
replace_question_mark <- function(x) {
if (is.character(x)) {
x <- na_if(x, "?")
}
return(x)
}
titanic <- titanic %>%
mutate_all(replace_question_mark)
set.seed(678)
shuffle_index <- sample(1:nrow(titanic))
head(shuffle_index)
titanic <- titanic[shuffle_index, ]
head(titanic)
library(dplyr)
# Drop variables
clean_titanic <- titanic %>%
select(-c(home.dest, cabin, name, x, ticket)) %>%
#Convert to factor level
mutate(pclass = factor(pclass, levels = c(1, 2, 3), labels = c('Upper', 'Middle', 'Lower')),
survived = factor(survived, levels = c(0, 1), labels = c('No', 'Yes'))) %>%
na.omit()
#previously were characters
clean_titanic$age <- as.numeric(clean_titanic$age)
clean_titanic$fare <- as.numeric(clean_titanic$fare)
glimpse(clean_titanic)
create_train_test <- function(data, size = 0.8, train = TRUE) {
n_row = nrow(data)
total_row = size * n_row
train_sample <- 1: total_row
if (train == TRUE) {
return (data[train_sample, ])
} else {
return (data[-train_sample, ])
}
}
data_train <- create_train_test(clean_titanic, 0.8, train = TRUE)
data_test <- create_train_test(clean_titanic, 0.8, train = FALSE)
data_train %>% group_by(survived) %>% summarize(`proportion of train` = n()/nrow(data_train))
data_test %>% group_by(survived) %>% summarize(`proportion of test` = n()/nrow(data_test))
mtrueyes <- confusionm$table['Yes', 'Yes']
mfalseyes <- confusionm$table['Yes', 'No']
mfalseno <- confusionm$table['No', 'Yes']
mtrueno <- confusionm$table['No', 'No']
ftrueyes <- confusionf$table['Yes', 'Yes']
ffalseyes <- confusionf$table['Yes', 'No']
ffalseno <- confusionf$table['No', 'Yes']
ftrueno <- confusionf$table['No', 'No']
numberm <- mtrueyes+mfalseyes+mfalseno+mtrueno
numberf <- ftrueyes+ffalseyes+ffalseno+ftrueno
# Overall accuracy rate ratio between females and males
confusionm$overall['Accuracy'] /  confusionf$overall['Accuracy']
# Disparate impact between females and males
mean(fitted.resultsm=="Yes")/mean(fitted.resultsf=="Yes")
((28 + 4)/(28 + 4 + 93 + 4))/((2 + 59)/(15 + 2 + 59 + 4))
# Statistical parity between females and males
abs(mean(fitted.resultsm=="Yes") - mean(fitted.resultsf=="Yes"))
# Predictive equality between females and males
abs((ffalseyes/(ffalseyes + ftrueno)) - (mfalseyes/(mfalseyes + mtrueno)))
abs((28/(28+93)) - (2/(2+4)))
# Equal opportunity between females and males
abs((mtrueyes/(mtrueyes+mfalseno)) - (ftrueyes/(ftrueyes+ffalseno)))
abs((4/(4+4)) - (59/(15+59)))
model <- glm(survived~pclass+sex+age+sibsp+parch, family=binomial(link="logit"),
data=data_train)
model
mtrueyes <- confusionm$table['Yes', 'Yes']
mfalseyes <- confusionm$table['Yes', 'No']
mfalseno <- confusionm$table['No', 'Yes']
mtrueno <- confusionm$table['No', 'No']
ftrueyes <- confusionf$table['Yes', 'Yes']
ffalseyes <- confusionf$table['Yes', 'No']
ffalseno <- confusionf$table['No', 'Yes']
ftrueno <- confusionf$table['No', 'No']
numberm <- mtrueyes+mfalseyes+mfalseno+mtrueno
numberf <- ftrueyes+ffalseyes+ffalseno+ftrueno
# Overall accuracy rate ratio between females and males
confusionm$overall['Accuracy'] /  confusionf$overall['Accuracy']
# Disparate impact between females and males
((mtrueyes+mfalseyes)/numberm) / ((ftrueyes+ffalseyes)/numberf)
# Statistical parity between females and males
abs(((mtrueyes+mfalseyes)/numberm) - ((ftrueyes+ffalseyes)/numberf))
# Predictive equality between females and males
abs((ffalseyes/(ffalseyes + ftrueno)) - (mfalseyes/(mfalseyes + mtrueno)))
# Equal opportunity between females and males
abs((mtrueyes/(mtrueyes+mfalseno)) - (ftrueyes/(ftrueyes+ffalseno)))
mtrueyes <- confusionm$table['Yes', 'Yes']
mfalseyes <- confusionm$table['Yes', 'No']
mfalseno <- confusionm$table['No', 'Yes']
mtrueno <- confusionm$table['No', 'No']
ftrueyes <- confusionf$table['Yes', 'Yes']
ffalseyes <- confusionf$table['Yes', 'No']
ffalseno <- confusionf$table['No', 'Yes']
ftrueno <- confusionf$table['No', 'No']
numberm <- mtrueyes+mfalseyes+mfalseno+mtrueno
numberf <- ftrueyes+ffalseyes+ffalseno+ftrueno
# Overall accuracy rate ratio between females and males
confusionm$overall['Accuracy'] /  confusionf$overall['Accuracy']
# Disparate impact between females and males
((mtrueyes+mfalseyes)/numberm) / ((ftrueyes+ffalseyes)/numberf)
(8/(93+28+8))/((15+59)/(15+59+6))
# Statistical parity between females and males
abs(((mtrueyes+mfalseyes)/numberm) - ((ftrueyes+ffalseyes)/numberf))
# Predictive equality between females and males
abs((ffalseyes/(ffalseyes + ftrueno)) - (mfalseyes/(mfalseyes + mtrueno)))
# Equal opportunity between females and males
abs((mtrueyes/(mtrueyes+mfalseno)) - (ftrueyes/(ftrueyes+ffalseno)))
mtrueyes <- confusionm$table['Yes', 'Yes']
mfalseyes <- confusionm$table['Yes', 'No']
mfalseno <- confusionm$table['No', 'Yes']
mtrueno <- confusionm$table['No', 'No']
ftrueyes <- confusionf$table['Yes', 'Yes']
ffalseyes <- confusionf$table['Yes', 'No']
ffalseno <- confusionf$table['No', 'Yes']
ftrueno <- confusionf$table['No', 'No']
numberm <- mtrueyes+mfalseyes+mfalseno+mtrueno
numberf <- ftrueyes+ffalseyes+ffalseno+ftrueno
# Overall accuracy rate ratio between females and males
confusionm$overall['Accuracy'] /  confusionf$overall['Accuracy']
# Disparate impact between females and males
((mtrueyes+mfalseyes)/numberm) / ((ftrueyes+ffalseyes)/numberf)
# Statistical parity between females and males
abs(((mtrueyes+mfalseyes)/numberm) - ((ftrueyes+ffalseyes)/numberf))
# Predictive equality between females and males
abs((ffalseyes/(ffalseyes + ftrueno)) - (mfalseyes/(mfalseyes + mtrueno)))
# Equal opportunity between females and males
abs((mtrueyes/(mtrueyes+mfalseno)) - (ftrueyes/(ftrueyes+ffalseno)))
